(*
This file is generated by Cogent

*)

theory Generated_SCorres_Normal
imports "Generated_Shallow_Normal"
"Generated_Deep_Normal"
"CogentShallow.Shallow_Tac"
begin

overloading
  valRel_T0 \<equiv> valRel
begin
  definition valRel_T0: "\<And>\<xi> x v. valRel_T0 \<xi> (x :: ('t_ex, 't_obj) T0) v \<equiv> \<exists>f_ex f_obj. v = VRecord [f_ex, f_obj] \<and> valRel \<xi> (T0.ex\<^sub>f x) f_ex \<and> valRel \<xi> (T0.obj\<^sub>f x) f_obj"
end

overloading
  valRel_ArrA \<equiv> valRel
begin
  definition valRel_ArrA: "\<And>\<xi> x v. valRel_ArrA \<xi> (x :: ('t_arr, 't_acc) ArrA) v \<equiv> \<exists>f_arr f_acc. v = VRecord [f_arr, f_acc] \<and> valRel \<xi> (ArrA.arr\<^sub>f x) f_arr \<and> valRel \<xi> (ArrA.acc\<^sub>f x) f_acc"
end

overloading
  valRel_ArrB \<equiv> valRel
begin
  definition valRel_ArrB: "\<And>\<xi> x v. valRel_ArrB \<xi> (x :: ('t_arr, 't_rbrk) ArrB) v \<equiv> \<exists>f_arr f_rbrk. v = VRecord [f_arr, f_rbrk] \<and> valRel \<xi> (ArrB.arr\<^sub>f x) f_arr \<and> valRel \<xi> (ArrB.rbrk\<^sub>f x) f_rbrk"
end

overloading
  valRel_WordArrayModifyP \<equiv> valRel
begin
  definition valRel_WordArrayModifyP: "\<And>\<xi> x v. valRel_WordArrayModifyP \<xi> (x :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP) v \<equiv> \<exists>f_arr f_idx f_f f_acc f_obsv. v = VRecord [f_arr, f_idx, f_f, f_acc, f_obsv] \<and> valRel \<xi> (WordArrayModifyP.arr\<^sub>f x) f_arr \<and> valRel \<xi> (WordArrayModifyP.idx\<^sub>f x) f_idx \<and> valRel \<xi> (WordArrayModifyP.f\<^sub>f x) f_f \<and> valRel \<xi> (WordArrayModifyP.acc\<^sub>f x) f_acc \<and> valRel \<xi> (WordArrayModifyP.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_ElemA \<equiv> valRel
begin
  definition valRel_ElemA: "\<And>\<xi> x v. valRel_ElemA \<xi> (x :: ('t_elem, 't_acc) ElemA) v \<equiv> \<exists>f_elem f_acc. v = VRecord [f_elem, f_acc] \<and> valRel \<xi> (ElemA.elem\<^sub>f x) f_elem \<and> valRel \<xi> (ElemA.acc\<^sub>f x) f_acc"
end

overloading
  valRel_WordArrayMapP \<equiv> valRel
begin
  definition valRel_WordArrayMapP: "\<And>\<xi> x v. valRel_WordArrayMapP \<xi> (x :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP) v \<equiv> \<exists>f_arr f_frm f_to f_f f_acc f_obsv. v = VRecord [f_arr, f_frm, f_to, f_f, f_acc, f_obsv] \<and> valRel \<xi> (WordArrayMapP.arr\<^sub>f x) f_arr \<and> valRel \<xi> (WordArrayMapP.frm\<^sub>f x) f_frm \<and> valRel \<xi> (WordArrayMapP.to\<^sub>f x) f_to \<and> valRel \<xi> (WordArrayMapP.f\<^sub>f x) f_f \<and> valRel \<xi> (WordArrayMapP.acc\<^sub>f x) f_acc \<and> valRel \<xi> (WordArrayMapP.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_ElemAO \<equiv> valRel
begin
  definition valRel_ElemAO: "\<And>\<xi> x v. valRel_ElemAO \<xi> (x :: ('t_elem, 't_acc, 't_obsv) ElemAO) v \<equiv> \<exists>f_elem f_acc f_obsv. v = VRecord [f_elem, f_acc, f_obsv] \<and> valRel \<xi> (ElemAO.elem\<^sub>f x) f_elem \<and> valRel \<xi> (ElemAO.acc\<^sub>f x) f_acc \<and> valRel \<xi> (ElemAO.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_ElemB \<equiv> valRel
begin
  definition valRel_ElemB: "\<And>\<xi> x v. valRel_ElemB \<xi> (x :: ('t_elem, 't_rbrk) ElemB) v \<equiv> \<exists>f_elem f_rbrk. v = VRecord [f_elem, f_rbrk] \<and> valRel \<xi> (ElemB.elem\<^sub>f x) f_elem \<and> valRel \<xi> (ElemB.rbrk\<^sub>f x) f_rbrk"
end

overloading
  valRel_FindResult \<equiv> valRel
begin
  definition valRel_FindResult: "valRel_FindResult \<xi> (v :: ('a, 'b) FindResult) v' \<equiv> case_FindResult (\<lambda>x. \<exists>x'. v' = VSum ''Found'' x' \<and> valRel \<xi> x x') (\<lambda>x. \<exists>x'. v' = VSum ''NotFound'' x' \<and> valRel \<xi> x x') v"
end

overloading
  valRel_Seq32StepFParam \<equiv> valRel
begin
  definition valRel_Seq32StepFParam: "\<And>\<xi> x v. valRel_Seq32StepFParam \<xi> (x :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam) v \<equiv> \<exists>f_frm f_to f_stepf f_f f_acc f_obsv. v = VRecord [f_frm, f_to, f_stepf, f_f, f_acc, f_obsv] \<and> valRel \<xi> (Seq32StepFParam.frm\<^sub>f x) f_frm \<and> valRel \<xi> (Seq32StepFParam.to\<^sub>f x) f_to \<and> valRel \<xi> (Seq32StepFParam.stepf\<^sub>f x) f_stepf \<and> valRel \<xi> (Seq32StepFParam.f\<^sub>f x) f_f \<and> valRel \<xi> (Seq32StepFParam.acc\<^sub>f x) f_acc \<and> valRel \<xi> (Seq32StepFParam.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_Seq32Param \<equiv> valRel
begin
  definition valRel_Seq32Param: "\<And>\<xi> x v. valRel_Seq32Param \<xi> (x :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param) v \<equiv> \<exists>f_frm f_to f_step f_f f_acc f_obsv. v = VRecord [f_frm, f_to, f_step, f_f, f_acc, f_obsv] \<and> valRel \<xi> (Seq32Param.frm\<^sub>f x) f_frm \<and> valRel \<xi> (Seq32Param.to\<^sub>f x) f_to \<and> valRel \<xi> (Seq32Param.step\<^sub>f x) f_step \<and> valRel \<xi> (Seq32Param.f\<^sub>f x) f_f \<and> valRel \<xi> (Seq32Param.acc\<^sub>f x) f_acc \<and> valRel \<xi> (Seq32Param.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_LoopResult \<equiv> valRel
begin
  definition valRel_LoopResult: "valRel_LoopResult \<xi> (v :: ('a, 'b) LoopResult) v' \<equiv> case_LoopResult (\<lambda>x. \<exists>x'. v' = VSum ''Break'' x' \<and> valRel \<xi> x x') (\<lambda>x. \<exists>x'. v' = VSum ''Iterate'' x' \<and> valRel \<xi> x x') v"
end

overloading
  valRel_OptElemA \<equiv> valRel
begin
  definition valRel_OptElemA: "\<And>\<xi> x v. valRel_OptElemA \<xi> (x :: ('t_oelem, 't_acc) OptElemA) v \<equiv> \<exists>f_oelem f_acc. v = VRecord [f_oelem, f_acc] \<and> valRel \<xi> (OptElemA.oelem\<^sub>f x) f_oelem \<and> valRel \<xi> (OptElemA.acc\<^sub>f x) f_acc"
end

overloading
  valRel_OptElemAO \<equiv> valRel
begin
  definition valRel_OptElemAO: "\<And>\<xi> x v. valRel_OptElemAO \<xi> (x :: ('t_oelem, 't_acc, 't_obsv) OptElemAO) v \<equiv> \<exists>f_oelem f_acc f_obsv. v = VRecord [f_oelem, f_acc, f_obsv] \<and> valRel \<xi> (OptElemAO.oelem\<^sub>f x) f_oelem \<and> valRel \<xi> (OptElemAO.acc\<^sub>f x) f_acc \<and> valRel \<xi> (OptElemAO.obsv\<^sub>f x) f_obsv"
end

overloading
  valRel_Option \<equiv> valRel
begin
  definition valRel_Option: "valRel_Option \<xi> (v :: ('a, 'b) Option) v' \<equiv> case_Option (\<lambda>x. \<exists>x'. v' = VSum ''None'' x' \<and> valRel \<xi> x x') (\<lambda>x. \<exists>x'. v' = VSum ''Some'' x' \<and> valRel \<xi> x x') v"
end

overloading
  valRel_R \<equiv> valRel
begin
  definition valRel_R: "valRel_R \<xi> (v :: ('a, 'b) R) v' \<equiv> case_R (\<lambda>x. \<exists>x'. v' = VSum ''Error'' x' \<and> valRel \<xi> x x') (\<lambda>x. \<exists>x'. v' = VSum ''Success'' x' \<and> valRel \<xi> x x') v"
end

overloading
  valRel_Seq32SimpleParam \<equiv> valRel
begin
  definition valRel_Seq32SimpleParam: "\<And>\<xi> x v. valRel_Seq32SimpleParam \<xi> (x :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam) v \<equiv> \<exists>f_frm f_to f_step f_f f_acc. v = VRecord [f_frm, f_to, f_step, f_f, f_acc] \<and> valRel \<xi> (Seq32SimpleParam.frm\<^sub>f x) f_frm \<and> valRel \<xi> (Seq32SimpleParam.to\<^sub>f x) f_to \<and> valRel \<xi> (Seq32SimpleParam.step\<^sub>f x) f_step \<and> valRel \<xi> (Seq32SimpleParam.f\<^sub>f x) f_f \<and> valRel \<xi> (Seq32SimpleParam.acc\<^sub>f x) f_acc"
end

overloading
  valRel_Seq32_bodyParam \<equiv> valRel
begin
  definition valRel_Seq32_bodyParam: "\<And>\<xi> x v. valRel_Seq32_bodyParam \<xi> (x :: ('t_acc, 't_obsv, 't_idx) Seq32_bodyParam) v \<equiv> \<exists>f_acc f_obsv f_idx. v = VRecord [f_acc, f_obsv, f_idx] \<and> valRel \<xi> (Seq32_bodyParam.acc\<^sub>f x) f_acc \<and> valRel \<xi> (Seq32_bodyParam.obsv\<^sub>f x) f_obsv \<and> valRel \<xi> (Seq32_bodyParam.idx\<^sub>f x) f_idx"
end

overloading
  valRel_RR \<equiv> valRel
begin
  definition valRel_RR: "\<And>\<xi> x v. valRel_RR \<xi> (x :: ('t_p1, 't_p2) RR) v \<equiv> \<exists>f_p1 f_p2. v = VRecord [f_p1, f_p2] \<and> valRel \<xi> (RR.p1\<^sub>f x) f_p1 \<and> valRel \<xi> (RR.p2\<^sub>f x) f_p2"
end

overloading
  valRel_WordArraySetP \<equiv> valRel
begin
  definition valRel_WordArraySetP: "\<And>\<xi> x v. valRel_WordArraySetP \<xi> (x :: ('t_p1, 't_p2, 't_p3, 't_p4) WordArraySetP) v \<equiv> \<exists>f_p1 f_p2 f_p3 f_p4. v = VRecord [f_p1, f_p2, f_p3, f_p4] \<and> valRel \<xi> (WordArraySetP.p1\<^sub>f x) f_p1 \<and> valRel \<xi> (WordArraySetP.p2\<^sub>f x) f_p2 \<and> valRel \<xi> (WordArraySetP.p3\<^sub>f x) f_p3 \<and> valRel \<xi> (WordArraySetP.p4\<^sub>f x) f_p4"
end

overloading
  valRel_WordArrayPutP \<equiv> valRel
begin
  definition valRel_WordArrayPutP: "\<And>\<xi> x v. valRel_WordArrayPutP \<xi> (x :: ('t_arr, 't_idx, 't_val) WordArrayPutP) v \<equiv> \<exists>f_arr f_idx f_val. v = VRecord [f_arr, f_idx, f_val] \<and> valRel \<xi> (WordArrayPutP.arr\<^sub>f x) f_arr \<and> valRel \<xi> (WordArrayPutP.idx\<^sub>f x) f_idx \<and> valRel \<xi> (WordArrayPutP.val\<^sub>f x) f_val"
end

overloading
  valRel_WordArrayFindSubP \<equiv> valRel
begin
  definition valRel_WordArrayFindSubP: "\<And>\<xi> x v. valRel_WordArrayFindSubP \<xi> (x :: ('t_p1, 't_p2, 't_p3) WordArrayFindSubP) v \<equiv> \<exists>f_p1 f_p2 f_p3. v = VRecord [f_p1, f_p2, f_p3] \<and> valRel \<xi> (WordArrayFindSubP.p1\<^sub>f x) f_p1 \<and> valRel \<xi> (WordArrayFindSubP.p2\<^sub>f x) f_p2 \<and> valRel \<xi> (WordArrayFindSubP.p3\<^sub>f x) f_p3"
end

overloading
  valRel_WordArrayCopyP \<equiv> valRel
begin
  definition valRel_WordArrayCopyP: "\<And>\<xi> x v. valRel_WordArrayCopyP \<xi> (x :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP) v \<equiv> \<exists>f_p1 f_p2 f_p3 f_p4 f_p5. v = VRecord [f_p1, f_p2, f_p3, f_p4, f_p5] \<and> valRel \<xi> (WordArrayCopyP.p1\<^sub>f x) f_p1 \<and> valRel \<xi> (WordArrayCopyP.p2\<^sub>f x) f_p2 \<and> valRel \<xi> (WordArrayCopyP.p3\<^sub>f x) f_p3 \<and> valRel \<xi> (WordArrayCopyP.p4\<^sub>f x) f_p4 \<and> valRel \<xi> (WordArrayCopyP.p5\<^sub>f x) f_p5"
end

lemma valRel_FindResult_Found[simp] :
  "valRel \<xi> (FindResult.Found x) (VSum ''Found'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_FindResult)
  done

lemma valRel_FindResult_NotFound[simp] :
  "valRel \<xi> (FindResult.NotFound x) (VSum ''NotFound'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_FindResult)
  done

lemma valRel_LoopResult_Break[simp] :
  "valRel \<xi> (LoopResult.Break x) (VSum ''Break'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_LoopResult)
  done

lemma valRel_LoopResult_Iterate[simp] :
  "valRel \<xi> (LoopResult.Iterate x) (VSum ''Iterate'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_LoopResult)
  done

lemma valRel_Option_None[simp] :
  "valRel \<xi> (Option.None x) (VSum ''None'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_Option)
  done

lemma valRel_Option_Some[simp] :
  "valRel \<xi> (Option.Some x) (VSum ''Some'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_Option)
  done

lemma valRel_R_Error[simp] :
  "valRel \<xi> (R.Error x) (VSum ''Error'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_R)
  done

lemma valRel_R_Success[simp] :
  "valRel \<xi> (R.Success x) (VSum ''Success'' x') = valRel \<xi> x x'"
  apply (simp add: valRel_R)
  done

lemmas valRel_records =
  valRel_T0
  T0.defs
  valRel_ArrA
  ArrA.defs
  valRel_ArrB
  ArrB.defs
  valRel_WordArrayModifyP
  WordArrayModifyP.defs
  valRel_ElemA
  ElemA.defs
  valRel_WordArrayMapP
  WordArrayMapP.defs
  valRel_ElemAO
  ElemAO.defs
  valRel_ElemB
  ElemB.defs
  valRel_Seq32StepFParam
  Seq32StepFParam.defs
  valRel_Seq32Param
  Seq32Param.defs
  valRel_OptElemA
  OptElemA.defs
  valRel_OptElemAO
  OptElemAO.defs
  valRel_Seq32SimpleParam
  Seq32SimpleParam.defs
  valRel_Seq32_bodyParam
  Seq32_bodyParam.defs
  valRel_RR
  RR.defs
  valRel_WordArraySetP
  WordArraySetP.defs
  valRel_WordArrayPutP
  WordArrayPutP.defs
  valRel_WordArrayFindSubP
  WordArrayFindSubP.defs
  valRel_WordArrayCopyP
  WordArrayCopyP.defs

lemmas valRel_variants =
  valRel_FindResult
  valRel_LoopResult
  valRel_Option
  valRel_R

context shallow begin

lemma scorres_case_Option__None :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (match (shallow_tac__var v)) match' (v'#\<gamma>) \<xi>) \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (rest (shallow_tac__var v)) rest' (v'#\<gamma>) \<xi>) \<Longrightarrow> 
  scorres (HOL.Let rest (\<lambda>co. case_Option match (\<lambda>x. co (Option.Some x)) x)) (Case x' ''None'' match' rest') \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def shallow_tac__var_def valRel_Option)
  apply (erule v_sem_caseE)
  apply (erule allE , erule impE , assumption)
  apply (cases x)
  apply (force simp: valRel_Option)
  apply (force simp: valRel_Option)
  apply (erule allE , erule impE , assumption)
  apply (cases x)
  apply (force simp: valRel_Option)
  apply (force simp: valRel_Option)
  done

lemma scorres_case_R__Error :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (match (shallow_tac__var v)) match' (v'#\<gamma>) \<xi>) \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (rest (shallow_tac__var v)) rest' (v'#\<gamma>) \<xi>) \<Longrightarrow> 
  scorres (HOL.Let rest (\<lambda>co. case_R match (\<lambda>x. co (R.Success x)) x)) (Case x' ''Error'' match' rest') \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def shallow_tac__var_def valRel_R)
  apply (erule v_sem_caseE)
  apply (erule allE , erule impE , assumption)
  apply (cases x)
  apply (force simp: valRel_R)
  apply (force simp: valRel_R)
  apply (erule allE , erule impE , assumption)
  apply (cases x)
  apply (force simp: valRel_R)
  apply (force simp: valRel_R)
  done

lemma scorres_esac_Option__Some :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (case_Option undefined Fun.id x) (Esac x' ''Some'') \<gamma> \<xi>"
  apply (cases x)
  apply (auto simp: scorres_def valRel_Option elim!: v_sem_esacE)
  done

lemma scorres_esac_R__Success :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (case_R undefined Fun.id x) (Esac x' ''Success'') \<gamma> \<xi>"
  apply (cases x)
  apply (auto simp: scorres_def valRel_R elim!: v_sem_esacE)
  done

lemma scorres_flat_case_Option :
  "\<And> x x' \<gamma> \<xi> shallow_None shallow_Some tag_1 tag_2 deep_1 deep_2.
  scorres x x' \<gamma> \<xi> \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (shallow_None (shallow_tac__var v)) (if tag_1 = ''None'' then deep_1 else if tag_2 = ''None'' then deep_2 else undefined) (if tag_1 = ''None'' then (v' # \<gamma>) else if tag_2 = ''None'' then (v' # VSum tag_2 v' # \<gamma>) else undefined) \<xi>) \<Longrightarrow>
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (shallow_Some (shallow_tac__var v)) (if tag_1 = ''Some'' then deep_1 else if tag_2 = ''Some'' then deep_2 else undefined) (if tag_1 = ''Some'' then (v' # \<gamma>) else if tag_2 = ''Some'' then (v' # VSum tag_2 v' # \<gamma>) else undefined) \<xi>) \<Longrightarrow>
  scorres (case_Option shallow_None shallow_Some x)(Case x' tag_1 deep_1 ((Let (Esac (Var 0) tag_2) deep_2))) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def shallow_tac__var_def valRel_Option)
  apply (erule v_sem_caseE)
  apply (erule allE , erule impE , assumption)
  apply (case_tac x)
  apply (force simp: valRel_Option)
  apply (force simp: valRel_Option)
  apply (erule v_sem_letE)
  apply (erule v_sem_esacE)
  apply (erule v_sem_varE)
  apply (erule allE , erule impE , assumption)
  apply (case_tac x)
  apply (force simp: valRel_Option)
  apply (force simp: valRel_Option)
  done

lemma scorres_flat_case_R :
  "\<And> x x' \<gamma> \<xi> shallow_Error shallow_Success tag_1 tag_2 deep_1 deep_2.
  scorres x x' \<gamma> \<xi> \<Longrightarrow> 
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (shallow_Error (shallow_tac__var v)) (if tag_1 = ''Error'' then deep_1 else if tag_2 = ''Error'' then deep_2 else undefined) (if tag_1 = ''Error'' then (v' # \<gamma>) else if tag_2 = ''Error'' then (v' # VSum tag_2 v' # \<gamma>) else undefined) \<xi>) \<Longrightarrow>
  (\<And>v v'. valRel \<xi> v v' \<Longrightarrow> scorres (shallow_Success (shallow_tac__var v)) (if tag_1 = ''Success'' then deep_1 else if tag_2 = ''Success'' then deep_2 else undefined) (if tag_1 = ''Success'' then (v' # \<gamma>) else if tag_2 = ''Success'' then (v' # VSum tag_2 v' # \<gamma>) else undefined) \<xi>) \<Longrightarrow>
  scorres (case_R shallow_Error shallow_Success x)(Case x' tag_1 deep_1 ((Let (Esac (Var 0) tag_2) deep_2))) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def shallow_tac__var_def valRel_R)
  apply (erule v_sem_caseE)
  apply (erule allE , erule impE , assumption)
  apply (case_tac x)
  apply (force simp: valRel_R)
  apply (force simp: valRel_R)
  apply (erule v_sem_letE)
  apply (erule v_sem_esacE)
  apply (erule v_sem_varE)
  apply (erule allE , erule impE , assumption)
  apply (case_tac x)
  apply (force simp: valRel_R)
  apply (force simp: valRel_R)
  done

lemma scorres_con_R__Error :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (R.Error x) (Con ts ''Error'' x') \<gamma> \<xi>"
  apply (erule scorres_con)
  apply simp
  done

lemma scorres_con_Option__None :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (Option.None x) (Con ts ''None'' x') \<gamma> \<xi>"
  apply (erule scorres_con)
  apply simp
  done

lemma scorres_con_Option__Some :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (Option.Some x) (Con ts ''Some'' x') \<gamma> \<xi>"
  apply (erule scorres_con)
  apply simp
  done

lemma scorres_con_R__Success :
  "scorres x x' \<gamma> \<xi> \<Longrightarrow> scorres (R.Success x) (Con ts ''Success'' x') \<gamma> \<xi>"
  apply (erule scorres_con)
  apply simp
  done

lemmas scorres_cases =
  scorres_case_Option__None
  scorres_case_R__Error

lemmas scorres_esacs =
  scorres_esac_Option__Some
  scorres_esac_R__Success

lemmas scorres_flat_cases =
  scorres_flat_case_Option
  scorres_flat_case_R

lemmas scorres_cons =
  scorres_con_R__Error
  scorres_con_Option__None
  scorres_con_Option__Some
  scorres_con_R__Success

lemma scorres_struct_T0 :
  "\<And>\<gamma> \<xi> s_ex s_obj d_ex d_obj.
  scorres s_ex d_ex \<gamma> \<xi> \<Longrightarrow>
  scorres s_obj d_obj \<gamma> \<xi> \<Longrightarrow>
  scorres (T0.make s_ex s_obj) (Struct ts [d_ex, d_obj]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_T0 T0.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ArrA :
  "\<And>\<gamma> \<xi> s_arr s_acc d_arr d_acc.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres (ArrA.make s_arr s_acc) (Struct ts [d_arr, d_acc]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ArrA ArrA.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ArrB :
  "\<And>\<gamma> \<xi> s_arr s_rbrk d_arr d_rbrk.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_rbrk d_rbrk \<gamma> \<xi> \<Longrightarrow>
  scorres (ArrB.make s_arr s_rbrk) (Struct ts [d_arr, d_rbrk]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ArrB ArrB.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayModifyP :
  "\<And>\<gamma> \<xi> s_arr s_idx s_f s_acc s_obsv d_arr d_idx d_f d_acc d_obsv.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_idx d_idx \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayModifyP.make s_arr s_idx s_f s_acc s_obsv) (Struct ts [d_arr, d_idx, d_f, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayModifyP WordArrayModifyP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ElemA :
  "\<And>\<gamma> \<xi> s_elem s_acc d_elem d_acc.
  scorres s_elem d_elem \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres (ElemA.make s_elem s_acc) (Struct ts [d_elem, d_acc]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ElemA ElemA.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayMapP :
  "\<And>\<gamma> \<xi> s_arr s_frm s_to s_f s_acc s_obsv d_arr d_frm d_to d_f d_acc d_obsv.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_frm d_frm \<gamma> \<xi> \<Longrightarrow>
  scorres s_to d_to \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayMapP.make s_arr s_frm s_to s_f s_acc s_obsv) (Struct ts [d_arr, d_frm, d_to, d_f, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayMapP WordArrayMapP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ElemAO :
  "\<And>\<gamma> \<xi> s_elem s_acc s_obsv d_elem d_acc d_obsv.
  scorres s_elem d_elem \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (ElemAO.make s_elem s_acc s_obsv) (Struct ts [d_elem, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ElemAO ElemAO.defs elim!: v_sem_elims)
  done

lemma scorres_struct_ElemB :
  "\<And>\<gamma> \<xi> s_elem s_rbrk d_elem d_rbrk.
  scorres s_elem d_elem \<gamma> \<xi> \<Longrightarrow>
  scorres s_rbrk d_rbrk \<gamma> \<xi> \<Longrightarrow>
  scorres (ElemB.make s_elem s_rbrk) (Struct ts [d_elem, d_rbrk]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_ElemB ElemB.defs elim!: v_sem_elims)
  done

lemma scorres_struct_Seq32StepFParam :
  "\<And>\<gamma> \<xi> s_frm s_to s_stepf s_f s_acc s_obsv d_frm d_to d_stepf d_f d_acc d_obsv.
  scorres s_frm d_frm \<gamma> \<xi> \<Longrightarrow>
  scorres s_to d_to \<gamma> \<xi> \<Longrightarrow>
  scorres s_stepf d_stepf \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (Seq32StepFParam.make s_frm s_to s_stepf s_f s_acc s_obsv) (Struct ts [d_frm, d_to, d_stepf, d_f, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_Seq32StepFParam Seq32StepFParam.defs elim!: v_sem_elims)
  done

lemma scorres_struct_Seq32Param :
  "\<And>\<gamma> \<xi> s_frm s_to s_step s_f s_acc s_obsv d_frm d_to d_step d_f d_acc d_obsv.
  scorres s_frm d_frm \<gamma> \<xi> \<Longrightarrow>
  scorres s_to d_to \<gamma> \<xi> \<Longrightarrow>
  scorres s_step d_step \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (Seq32Param.make s_frm s_to s_step s_f s_acc s_obsv) (Struct ts [d_frm, d_to, d_step, d_f, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_Seq32Param Seq32Param.defs elim!: v_sem_elims)
  done

lemma scorres_struct_OptElemA :
  "\<And>\<gamma> \<xi> s_oelem s_acc d_oelem d_acc.
  scorres s_oelem d_oelem \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres (OptElemA.make s_oelem s_acc) (Struct ts [d_oelem, d_acc]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_OptElemA OptElemA.defs elim!: v_sem_elims)
  done

lemma scorres_struct_OptElemAO :
  "\<And>\<gamma> \<xi> s_oelem s_acc s_obsv d_oelem d_acc d_obsv.
  scorres s_oelem d_oelem \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres (OptElemAO.make s_oelem s_acc s_obsv) (Struct ts [d_oelem, d_acc, d_obsv]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_OptElemAO OptElemAO.defs elim!: v_sem_elims)
  done

lemma scorres_struct_Seq32SimpleParam :
  "\<And>\<gamma> \<xi> s_frm s_to s_step s_f s_acc d_frm d_to d_step d_f d_acc.
  scorres s_frm d_frm \<gamma> \<xi> \<Longrightarrow>
  scorres s_to d_to \<gamma> \<xi> \<Longrightarrow>
  scorres s_step d_step \<gamma> \<xi> \<Longrightarrow>
  scorres s_f d_f \<gamma> \<xi> \<Longrightarrow>
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres (Seq32SimpleParam.make s_frm s_to s_step s_f s_acc) (Struct ts [d_frm, d_to, d_step, d_f, d_acc]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_Seq32SimpleParam Seq32SimpleParam.defs elim!: v_sem_elims)
  done

lemma scorres_struct_Seq32_bodyParam :
  "\<And>\<gamma> \<xi> s_acc s_obsv s_idx d_acc d_obsv d_idx.
  scorres s_acc d_acc \<gamma> \<xi> \<Longrightarrow>
  scorres s_obsv d_obsv \<gamma> \<xi> \<Longrightarrow>
  scorres s_idx d_idx \<gamma> \<xi> \<Longrightarrow>
  scorres (Seq32_bodyParam.make s_acc s_obsv s_idx) (Struct ts [d_acc, d_obsv, d_idx]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_Seq32_bodyParam Seq32_bodyParam.defs elim!: v_sem_elims)
  done

lemma scorres_struct_RR :
  "\<And>\<gamma> \<xi> s_p1 s_p2 d_p1 d_p2.
  scorres s_p1 d_p1 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p2 d_p2 \<gamma> \<xi> \<Longrightarrow>
  scorres (RR.make s_p1 s_p2) (Struct ts [d_p1, d_p2]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_RR RR.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArraySetP :
  "\<And>\<gamma> \<xi> s_p1 s_p2 s_p3 s_p4 d_p1 d_p2 d_p3 d_p4.
  scorres s_p1 d_p1 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p2 d_p2 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p3 d_p3 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p4 d_p4 \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArraySetP.make s_p1 s_p2 s_p3 s_p4) (Struct ts [d_p1, d_p2, d_p3, d_p4]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArraySetP WordArraySetP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayPutP :
  "\<And>\<gamma> \<xi> s_arr s_idx s_val d_arr d_idx d_val.
  scorres s_arr d_arr \<gamma> \<xi> \<Longrightarrow>
  scorres s_idx d_idx \<gamma> \<xi> \<Longrightarrow>
  scorres s_val d_val \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayPutP.make s_arr s_idx s_val) (Struct ts [d_arr, d_idx, d_val]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayPutP WordArrayPutP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayFindSubP :
  "\<And>\<gamma> \<xi> s_p1 s_p2 s_p3 d_p1 d_p2 d_p3.
  scorres s_p1 d_p1 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p2 d_p2 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p3 d_p3 \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayFindSubP.make s_p1 s_p2 s_p3) (Struct ts [d_p1, d_p2, d_p3]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayFindSubP WordArrayFindSubP.defs elim!: v_sem_elims)
  done

lemma scorres_struct_WordArrayCopyP :
  "\<And>\<gamma> \<xi> s_p1 s_p2 s_p3 s_p4 s_p5 d_p1 d_p2 d_p3 d_p4 d_p5.
  scorres s_p1 d_p1 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p2 d_p2 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p3 d_p3 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p4 d_p4 \<gamma> \<xi> \<Longrightarrow>
  scorres s_p5 d_p5 \<gamma> \<xi> \<Longrightarrow>
  scorres (WordArrayCopyP.make s_p1 s_p2 s_p3 s_p4 s_p5) (Struct ts [d_p1, d_p2, d_p3, d_p4, d_p5]) \<gamma> \<xi>"
  apply (clarsimp simp: scorres_def valRel_WordArrayCopyP WordArrayCopyP.defs elim!: v_sem_elims)
  done

lemmas scorres_structs =
  scorres_struct_T0
  scorres_struct_ArrA
  scorres_struct_ArrB
  scorres_struct_WordArrayModifyP
  scorres_struct_ElemA
  scorres_struct_WordArrayMapP
  scorres_struct_ElemAO
  scorres_struct_ElemB
  scorres_struct_Seq32StepFParam
  scorres_struct_Seq32Param
  scorres_struct_OptElemA
  scorres_struct_OptElemAO
  scorres_struct_Seq32SimpleParam
  scorres_struct_Seq32_bodyParam
  scorres_struct_RR
  scorres_struct_WordArraySetP
  scorres_struct_WordArrayPutP
  scorres_struct_WordArrayFindSubP
  scorres_struct_WordArrayCopyP

lemma shallow_tac_rec_field_T0__ex :
  "shallow_tac_rec_field \<xi> (T0.ex\<^sub>f :: ('t_ex, 't_obj) T0 \<Rightarrow> 't_ex) T0.ex\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_T0)
  done

lemma shallow_tac_rec_field_T0__obj :
  "shallow_tac_rec_field \<xi> (T0.obj\<^sub>f :: ('t_ex, 't_obj) T0 \<Rightarrow> 't_obj) T0.obj\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_T0)
  done

lemma shallow_tac_rec_field_ArrA__arr :
  "shallow_tac_rec_field \<xi> (ArrA.arr\<^sub>f :: ('t_arr, 't_acc) ArrA \<Rightarrow> 't_arr) ArrA.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ArrA)
  done

lemma shallow_tac_rec_field_ArrA__acc :
  "shallow_tac_rec_field \<xi> (ArrA.acc\<^sub>f :: ('t_arr, 't_acc) ArrA \<Rightarrow> 't_acc) ArrA.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ArrA)
  done

lemma shallow_tac_rec_field_ArrB__arr :
  "shallow_tac_rec_field \<xi> (ArrB.arr\<^sub>f :: ('t_arr, 't_rbrk) ArrB \<Rightarrow> 't_arr) ArrB.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ArrB)
  done

lemma shallow_tac_rec_field_ArrB__rbrk :
  "shallow_tac_rec_field \<xi> (ArrB.rbrk\<^sub>f :: ('t_arr, 't_rbrk) ArrB \<Rightarrow> 't_rbrk) ArrB.rbrk\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ArrB)
  done

lemma shallow_tac_rec_field_WordArrayModifyP__arr :
  "shallow_tac_rec_field \<xi> (WordArrayModifyP.arr\<^sub>f :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP \<Rightarrow> 't_arr) WordArrayModifyP.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayModifyP)
  done

lemma shallow_tac_rec_field_WordArrayModifyP__idx :
  "shallow_tac_rec_field \<xi> (WordArrayModifyP.idx\<^sub>f :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP \<Rightarrow> 't_idx) WordArrayModifyP.idx\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayModifyP)
  done

lemma shallow_tac_rec_field_WordArrayModifyP__f :
  "shallow_tac_rec_field \<xi> (WordArrayModifyP.f\<^sub>f :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP \<Rightarrow> 't_f) WordArrayModifyP.f\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayModifyP)
  done

lemma shallow_tac_rec_field_WordArrayModifyP__acc :
  "shallow_tac_rec_field \<xi> (WordArrayModifyP.acc\<^sub>f :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP \<Rightarrow> 't_acc) WordArrayModifyP.acc\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayModifyP)
  done

lemma shallow_tac_rec_field_WordArrayModifyP__obsv :
  "shallow_tac_rec_field \<xi> (WordArrayModifyP.obsv\<^sub>f :: ('t_arr, 't_idx, 't_f, 't_acc, 't_obsv) WordArrayModifyP \<Rightarrow> 't_obsv) WordArrayModifyP.obsv\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayModifyP)
  done

lemma shallow_tac_rec_field_ElemA__elem :
  "shallow_tac_rec_field \<xi> (ElemA.elem\<^sub>f :: ('t_elem, 't_acc) ElemA \<Rightarrow> 't_elem) ElemA.elem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemA)
  done

lemma shallow_tac_rec_field_ElemA__acc :
  "shallow_tac_rec_field \<xi> (ElemA.acc\<^sub>f :: ('t_elem, 't_acc) ElemA \<Rightarrow> 't_acc) ElemA.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemA)
  done

lemma shallow_tac_rec_field_WordArrayMapP__arr :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.arr\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_arr) WordArrayMapP.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_WordArrayMapP__frm :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.frm\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_frm) WordArrayMapP.frm\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_WordArrayMapP__to :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.to\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_to) WordArrayMapP.to\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_WordArrayMapP__f :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.f\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_f) WordArrayMapP.f\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_WordArrayMapP__acc :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.acc\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_acc) WordArrayMapP.acc\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_WordArrayMapP__obsv :
  "shallow_tac_rec_field \<xi> (WordArrayMapP.obsv\<^sub>f :: ('t_arr, 't_frm, 't_to, 't_f, 't_acc, 't_obsv) WordArrayMapP \<Rightarrow> 't_obsv) WordArrayMapP.obsv\<^sub>f_update 5"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayMapP)
  done

lemma shallow_tac_rec_field_ElemAO__elem :
  "shallow_tac_rec_field \<xi> (ElemAO.elem\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_elem) ElemAO.elem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_ElemAO__acc :
  "shallow_tac_rec_field \<xi> (ElemAO.acc\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_acc) ElemAO.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_ElemAO__obsv :
  "shallow_tac_rec_field \<xi> (ElemAO.obsv\<^sub>f :: ('t_elem, 't_acc, 't_obsv) ElemAO \<Rightarrow> 't_obsv) ElemAO.obsv\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemAO)
  done

lemma shallow_tac_rec_field_ElemB__elem :
  "shallow_tac_rec_field \<xi> (ElemB.elem\<^sub>f :: ('t_elem, 't_rbrk) ElemB \<Rightarrow> 't_elem) ElemB.elem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemB)
  done

lemma shallow_tac_rec_field_ElemB__rbrk :
  "shallow_tac_rec_field \<xi> (ElemB.rbrk\<^sub>f :: ('t_elem, 't_rbrk) ElemB \<Rightarrow> 't_rbrk) ElemB.rbrk\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_ElemB)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__frm :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.frm\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_frm) Seq32StepFParam.frm\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__to :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.to\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_to) Seq32StepFParam.to\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__stepf :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.stepf\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_stepf) Seq32StepFParam.stepf\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__f :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.f\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_f) Seq32StepFParam.f\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__acc :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.acc\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_acc) Seq32StepFParam.acc\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32StepFParam__obsv :
  "shallow_tac_rec_field \<xi> (Seq32StepFParam.obsv\<^sub>f :: ('t_frm, 't_to, 't_stepf, 't_f, 't_acc, 't_obsv) Seq32StepFParam \<Rightarrow> 't_obsv) Seq32StepFParam.obsv\<^sub>f_update 5"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32StepFParam)
  done

lemma shallow_tac_rec_field_Seq32Param__frm :
  "shallow_tac_rec_field \<xi> (Seq32Param.frm\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_frm) Seq32Param.frm\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_Seq32Param__to :
  "shallow_tac_rec_field \<xi> (Seq32Param.to\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_to) Seq32Param.to\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_Seq32Param__step :
  "shallow_tac_rec_field \<xi> (Seq32Param.step\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_step) Seq32Param.step\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_Seq32Param__f :
  "shallow_tac_rec_field \<xi> (Seq32Param.f\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_f) Seq32Param.f\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_Seq32Param__acc :
  "shallow_tac_rec_field \<xi> (Seq32Param.acc\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_acc) Seq32Param.acc\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_Seq32Param__obsv :
  "shallow_tac_rec_field \<xi> (Seq32Param.obsv\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc, 't_obsv) Seq32Param \<Rightarrow> 't_obsv) Seq32Param.obsv\<^sub>f_update 5"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32Param)
  done

lemma shallow_tac_rec_field_OptElemA__oelem :
  "shallow_tac_rec_field \<xi> (OptElemA.oelem\<^sub>f :: ('t_oelem, 't_acc) OptElemA \<Rightarrow> 't_oelem) OptElemA.oelem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_OptElemA)
  done

lemma shallow_tac_rec_field_OptElemA__acc :
  "shallow_tac_rec_field \<xi> (OptElemA.acc\<^sub>f :: ('t_oelem, 't_acc) OptElemA \<Rightarrow> 't_acc) OptElemA.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_OptElemA)
  done

lemma shallow_tac_rec_field_OptElemAO__oelem :
  "shallow_tac_rec_field \<xi> (OptElemAO.oelem\<^sub>f :: ('t_oelem, 't_acc, 't_obsv) OptElemAO \<Rightarrow> 't_oelem) OptElemAO.oelem\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_OptElemAO)
  done

lemma shallow_tac_rec_field_OptElemAO__acc :
  "shallow_tac_rec_field \<xi> (OptElemAO.acc\<^sub>f :: ('t_oelem, 't_acc, 't_obsv) OptElemAO \<Rightarrow> 't_acc) OptElemAO.acc\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_OptElemAO)
  done

lemma shallow_tac_rec_field_OptElemAO__obsv :
  "shallow_tac_rec_field \<xi> (OptElemAO.obsv\<^sub>f :: ('t_oelem, 't_acc, 't_obsv) OptElemAO \<Rightarrow> 't_obsv) OptElemAO.obsv\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_OptElemAO)
  done

lemma shallow_tac_rec_field_Seq32SimpleParam__frm :
  "shallow_tac_rec_field \<xi> (Seq32SimpleParam.frm\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam \<Rightarrow> 't_frm) Seq32SimpleParam.frm\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32SimpleParam)
  done

lemma shallow_tac_rec_field_Seq32SimpleParam__to :
  "shallow_tac_rec_field \<xi> (Seq32SimpleParam.to\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam \<Rightarrow> 't_to) Seq32SimpleParam.to\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32SimpleParam)
  done

lemma shallow_tac_rec_field_Seq32SimpleParam__step :
  "shallow_tac_rec_field \<xi> (Seq32SimpleParam.step\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam \<Rightarrow> 't_step) Seq32SimpleParam.step\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32SimpleParam)
  done

lemma shallow_tac_rec_field_Seq32SimpleParam__f :
  "shallow_tac_rec_field \<xi> (Seq32SimpleParam.f\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam \<Rightarrow> 't_f) Seq32SimpleParam.f\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32SimpleParam)
  done

lemma shallow_tac_rec_field_Seq32SimpleParam__acc :
  "shallow_tac_rec_field \<xi> (Seq32SimpleParam.acc\<^sub>f :: ('t_frm, 't_to, 't_step, 't_f, 't_acc) Seq32SimpleParam \<Rightarrow> 't_acc) Seq32SimpleParam.acc\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32SimpleParam)
  done

lemma shallow_tac_rec_field_Seq32_bodyParam__acc :
  "shallow_tac_rec_field \<xi> (Seq32_bodyParam.acc\<^sub>f :: ('t_acc, 't_obsv, 't_idx) Seq32_bodyParam \<Rightarrow> 't_acc) Seq32_bodyParam.acc\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32_bodyParam)
  done

lemma shallow_tac_rec_field_Seq32_bodyParam__obsv :
  "shallow_tac_rec_field \<xi> (Seq32_bodyParam.obsv\<^sub>f :: ('t_acc, 't_obsv, 't_idx) Seq32_bodyParam \<Rightarrow> 't_obsv) Seq32_bodyParam.obsv\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32_bodyParam)
  done

lemma shallow_tac_rec_field_Seq32_bodyParam__idx :
  "shallow_tac_rec_field \<xi> (Seq32_bodyParam.idx\<^sub>f :: ('t_acc, 't_obsv, 't_idx) Seq32_bodyParam \<Rightarrow> 't_idx) Seq32_bodyParam.idx\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_Seq32_bodyParam)
  done

lemma shallow_tac_rec_field_RR__p1 :
  "shallow_tac_rec_field \<xi> (RR.p1\<^sub>f :: ('t_p1, 't_p2) RR \<Rightarrow> 't_p1) RR.p1\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_RR)
  done

lemma shallow_tac_rec_field_RR__p2 :
  "shallow_tac_rec_field \<xi> (RR.p2\<^sub>f :: ('t_p1, 't_p2) RR \<Rightarrow> 't_p2) RR.p2\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_RR)
  done

lemma shallow_tac_rec_field_WordArraySetP__p1 :
  "shallow_tac_rec_field \<xi> (WordArraySetP.p1\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4) WordArraySetP \<Rightarrow> 't_p1) WordArraySetP.p1\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArraySetP)
  done

lemma shallow_tac_rec_field_WordArraySetP__p2 :
  "shallow_tac_rec_field \<xi> (WordArraySetP.p2\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4) WordArraySetP \<Rightarrow> 't_p2) WordArraySetP.p2\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArraySetP)
  done

lemma shallow_tac_rec_field_WordArraySetP__p3 :
  "shallow_tac_rec_field \<xi> (WordArraySetP.p3\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4) WordArraySetP \<Rightarrow> 't_p3) WordArraySetP.p3\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArraySetP)
  done

lemma shallow_tac_rec_field_WordArraySetP__p4 :
  "shallow_tac_rec_field \<xi> (WordArraySetP.p4\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4) WordArraySetP \<Rightarrow> 't_p4) WordArraySetP.p4\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArraySetP)
  done

lemma shallow_tac_rec_field_WordArrayPutP__arr :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.arr\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_arr) WordArrayPutP.arr\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemma shallow_tac_rec_field_WordArrayPutP__idx :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.idx\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_idx) WordArrayPutP.idx\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemma shallow_tac_rec_field_WordArrayPutP__val :
  "shallow_tac_rec_field \<xi> (WordArrayPutP.val\<^sub>f :: ('t_arr, 't_idx, 't_val) WordArrayPutP \<Rightarrow> 't_val) WordArrayPutP.val\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayPutP)
  done

lemma shallow_tac_rec_field_WordArrayFindSubP__p1 :
  "shallow_tac_rec_field \<xi> (WordArrayFindSubP.p1\<^sub>f :: ('t_p1, 't_p2, 't_p3) WordArrayFindSubP \<Rightarrow> 't_p1) WordArrayFindSubP.p1\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayFindSubP)
  done

lemma shallow_tac_rec_field_WordArrayFindSubP__p2 :
  "shallow_tac_rec_field \<xi> (WordArrayFindSubP.p2\<^sub>f :: ('t_p1, 't_p2, 't_p3) WordArrayFindSubP \<Rightarrow> 't_p2) WordArrayFindSubP.p2\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayFindSubP)
  done

lemma shallow_tac_rec_field_WordArrayFindSubP__p3 :
  "shallow_tac_rec_field \<xi> (WordArrayFindSubP.p3\<^sub>f :: ('t_p1, 't_p2, 't_p3) WordArrayFindSubP \<Rightarrow> 't_p3) WordArrayFindSubP.p3\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayFindSubP)
  done

lemma shallow_tac_rec_field_WordArrayCopyP__p1 :
  "shallow_tac_rec_field \<xi> (WordArrayCopyP.p1\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP \<Rightarrow> 't_p1) WordArrayCopyP.p1\<^sub>f_update 0"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayCopyP)
  done

lemma shallow_tac_rec_field_WordArrayCopyP__p2 :
  "shallow_tac_rec_field \<xi> (WordArrayCopyP.p2\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP \<Rightarrow> 't_p2) WordArrayCopyP.p2\<^sub>f_update 1"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayCopyP)
  done

lemma shallow_tac_rec_field_WordArrayCopyP__p3 :
  "shallow_tac_rec_field \<xi> (WordArrayCopyP.p3\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP \<Rightarrow> 't_p3) WordArrayCopyP.p3\<^sub>f_update 2"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayCopyP)
  done

lemma shallow_tac_rec_field_WordArrayCopyP__p4 :
  "shallow_tac_rec_field \<xi> (WordArrayCopyP.p4\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP \<Rightarrow> 't_p4) WordArrayCopyP.p4\<^sub>f_update 3"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayCopyP)
  done

lemma shallow_tac_rec_field_WordArrayCopyP__p5 :
  "shallow_tac_rec_field \<xi> (WordArrayCopyP.p5\<^sub>f :: ('t_p1, 't_p2, 't_p3, 't_p4, 't_p5) WordArrayCopyP \<Rightarrow> 't_p5) WordArrayCopyP.p5\<^sub>f_update 4"
  apply (fastforce intro!: shallow_tac_rec_fieldI simp: valRel_WordArrayCopyP)
  done

lemmas scorres_rec_fields =
  shallow_tac_rec_field_T0__ex
  shallow_tac_rec_field_T0__obj
  shallow_tac_rec_field_ArrA__arr
  shallow_tac_rec_field_ArrA__acc
  shallow_tac_rec_field_ArrB__arr
  shallow_tac_rec_field_ArrB__rbrk
  shallow_tac_rec_field_WordArrayModifyP__arr
  shallow_tac_rec_field_WordArrayModifyP__idx
  shallow_tac_rec_field_WordArrayModifyP__f
  shallow_tac_rec_field_WordArrayModifyP__acc
  shallow_tac_rec_field_WordArrayModifyP__obsv
  shallow_tac_rec_field_ElemA__elem
  shallow_tac_rec_field_ElemA__acc
  shallow_tac_rec_field_WordArrayMapP__arr
  shallow_tac_rec_field_WordArrayMapP__frm
  shallow_tac_rec_field_WordArrayMapP__to
  shallow_tac_rec_field_WordArrayMapP__f
  shallow_tac_rec_field_WordArrayMapP__acc
  shallow_tac_rec_field_WordArrayMapP__obsv
  shallow_tac_rec_field_ElemAO__elem
  shallow_tac_rec_field_ElemAO__acc
  shallow_tac_rec_field_ElemAO__obsv
  shallow_tac_rec_field_ElemB__elem
  shallow_tac_rec_field_ElemB__rbrk
  shallow_tac_rec_field_Seq32StepFParam__frm
  shallow_tac_rec_field_Seq32StepFParam__to
  shallow_tac_rec_field_Seq32StepFParam__stepf
  shallow_tac_rec_field_Seq32StepFParam__f
  shallow_tac_rec_field_Seq32StepFParam__acc
  shallow_tac_rec_field_Seq32StepFParam__obsv
  shallow_tac_rec_field_Seq32Param__frm
  shallow_tac_rec_field_Seq32Param__to
  shallow_tac_rec_field_Seq32Param__step
  shallow_tac_rec_field_Seq32Param__f
  shallow_tac_rec_field_Seq32Param__acc
  shallow_tac_rec_field_Seq32Param__obsv
  shallow_tac_rec_field_OptElemA__oelem
  shallow_tac_rec_field_OptElemA__acc
  shallow_tac_rec_field_OptElemAO__oelem
  shallow_tac_rec_field_OptElemAO__acc
  shallow_tac_rec_field_OptElemAO__obsv
  shallow_tac_rec_field_Seq32SimpleParam__frm
  shallow_tac_rec_field_Seq32SimpleParam__to
  shallow_tac_rec_field_Seq32SimpleParam__step
  shallow_tac_rec_field_Seq32SimpleParam__f
  shallow_tac_rec_field_Seq32SimpleParam__acc
  shallow_tac_rec_field_Seq32_bodyParam__acc
  shallow_tac_rec_field_Seq32_bodyParam__obsv
  shallow_tac_rec_field_Seq32_bodyParam__idx
  shallow_tac_rec_field_RR__p1
  shallow_tac_rec_field_RR__p2
  shallow_tac_rec_field_WordArraySetP__p1
  shallow_tac_rec_field_WordArraySetP__p2
  shallow_tac_rec_field_WordArraySetP__p3
  shallow_tac_rec_field_WordArraySetP__p4
  shallow_tac_rec_field_WordArrayPutP__arr
  shallow_tac_rec_field_WordArrayPutP__idx
  shallow_tac_rec_field_WordArrayPutP__val
  shallow_tac_rec_field_WordArrayFindSubP__p1
  shallow_tac_rec_field_WordArrayFindSubP__p2
  shallow_tac_rec_field_WordArrayFindSubP__p3
  shallow_tac_rec_field_WordArrayCopyP__p1
  shallow_tac_rec_field_WordArrayCopyP__p2
  shallow_tac_rec_field_WordArrayCopyP__p3
  shallow_tac_rec_field_WordArrayCopyP__p4
  shallow_tac_rec_field_WordArrayCopyP__p5

local_setup \<open>
gen_scorres_lemmas "Generated_ShallowShared" "Generated_Shallow_Normal" "Generated_Deep_Normal" Cogent_abstract_functions Cogent_functions
\<close>


end

end
