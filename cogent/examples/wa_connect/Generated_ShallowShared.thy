(*
This file is generated by Cogent

*)

theory Generated_ShallowShared
imports "Cogent.Util"
"CogentShallow.ShallowUtil"
begin

type_synonym 'a WordArray = "'a list"

typedecl 'a View

typedecl  SysState

record ('a, 'b) T0 =
  ex\<^sub>f :: "'a"
  obj\<^sub>f :: "'b"

record ('a, 'b) ArrA =
  arr\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b) ArrB =
  arr\<^sub>f :: "'a"
  rbrk\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd, 'e) WordArrayModifyP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  f\<^sub>f :: "'c"
  acc\<^sub>f :: "'d"
  obsv\<^sub>f :: "'e"

record ('a, 'b) ElemA =
  elem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd, 'e, 'f) WordArrayMapP =
  arr\<^sub>f :: "'a"
  frm\<^sub>f :: "'b"
  to\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c) ElemAO =
  elem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"
  obsv\<^sub>f :: "'c"

record ('a, 'b) ElemB =
  elem\<^sub>f :: "'a"
  rbrk\<^sub>f :: "'b"

datatype ('a, 'b) FindResult =
  Found "'a"|
  NotFound "'b"

record ('a, 'b, 'c, 'd, 'e, 'f) Seq32StepFParam =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  stepf\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

record ('a, 'b, 'c, 'd, 'e, 'f) Seq32Param =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  step\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"
  obsv\<^sub>f :: "'f"

datatype ('a, 'b) LoopResult =
  Break "'a"|
  Iterate "'b"

record ('a, 'b) OptElemA =
  oelem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"

record ('a, 'b, 'c) OptElemAO =
  oelem\<^sub>f :: "'a"
  acc\<^sub>f :: "'b"
  obsv\<^sub>f :: "'c"

datatype ('a, 'b) Option =
  None "'a"|
  Some "'b"

datatype ('a, 'b) R =
  Error "'a"|
  Success "'b"

record ('a, 'b, 'c, 'd, 'e) Seq32SimpleParam =
  frm\<^sub>f :: "'a"
  to\<^sub>f :: "'b"
  step\<^sub>f :: "'c"
  f\<^sub>f :: "'d"
  acc\<^sub>f :: "'e"

record ('a, 'b, 'c) Seq32_bodyParam =
  acc\<^sub>f :: "'a"
  obsv\<^sub>f :: "'b"
  idx\<^sub>f :: "'c"

record ('a, 'b) RR =
  p1\<^sub>f :: "'a"
  p2\<^sub>f :: "'b"

record ('a, 'b, 'c, 'd) WordArraySetP =
  p1\<^sub>f :: "'a"
  p2\<^sub>f :: "'b"
  p3\<^sub>f :: "'c"
  p4\<^sub>f :: "'d"

record ('a, 'b, 'c) WordArrayPutP =
  arr\<^sub>f :: "'a"
  idx\<^sub>f :: "'b"
  val\<^sub>f :: "'c"

record ('a, 'b, 'c) WordArrayFindSubP =
  p1\<^sub>f :: "'a"
  p2\<^sub>f :: "'b"
  p3\<^sub>f :: "'c"

record ('a, 'b, 'c, 'd, 'e) WordArrayCopyP =
  p1\<^sub>f :: "'a"
  p2\<^sub>f :: "'b"
  p3\<^sub>f :: "'c"
  p4\<^sub>f :: "'d"
  p5\<^sub>f :: "'e"

type_synonym  WordArrayIndex = "32 word"

type_synonym 'a WordArrayCopyP\<^sub>T = "('a WordArray, 'a WordArray, 32 word, 32 word, 32 word) WordArrayCopyP"

type_synonym 'a WordArrayFindSubP\<^sub>T = "('a WordArray, 'a WordArray, 32 word) WordArrayFindSubP"

type_synonym 'a WordArrayPutP\<^sub>T = "('a WordArray, 32 word, 'a) WordArrayPutP"

type_synonym 'a WordArraySetP\<^sub>T = "('a WordArray, 32 word, 32 word, 'a) WordArraySetP"

type_synonym 'a WordArrayView = "'a WordArray View"

type_synonym ('a, 'b) WordArrayCloneP\<^sub>T = "( SysState, 'a WordArray) RR"

type_synonym 'a WordArraySliceP\<^sub>T = "( SysState, 'a WordArray, 32 word, 32 word) WordArraySetP"

type_synonym ('acc, 'obsv, 'rbrk) Seq64_bodyParam\<^sub>T = "('acc, 'obsv, 64 word) Seq32_bodyParam"

type_synonym  Seq32_stepParam = "32 word \<Rightarrow> 32 word"

type_synonym 'acc Seq32_simple_bodyParam = "'acc"

type_synonym 'acc Seq32_simple_body = "'acc \<Rightarrow> 'acc"

type_synonym ('acc, 'obsv, 'rbrk) Seq32_bodyParam\<^sub>T = "('acc, 'obsv, 32 word) Seq32_bodyParam"

type_synonym 'acc Seq32SimpleParam\<^sub>T = "(32 word, 32 word, 32 word, 'acc \<Rightarrow> 'acc, 'acc) Seq32SimpleParam"

type_synonym ('a, 'e) Result\<^sub>T = "('e, 'a) R"

type_synonym ('c, 'a, 'e) ResultWith\<^sub>T = "('c, ('e, 'a) R) RR"

type_synonym ('c, 'a, 'e) RR\<^sub>T = "('c, ('e, 'a) R) RR"

type_synonym ('a, 'e) R\<^sub>T = "('e, 'a) R"

type_synonym 'a Option\<^sub>T = "(unit, 'a) Option"

type_synonym ('a, 'acc, 'obsv) OptElemAO\<^sub>T = "((unit, 'a) Option, 'acc, 'obsv) OptElemAO"

type_synonym ('a, 'acc) OptElemA\<^sub>T = "((unit, 'a) Option, 'acc) OptElemA"

type_synonym ('a, 'b) LoopResult\<^sub>T = "('b, 'a) LoopResult"

type_synonym ('acc, 'brk) LRR\<^sub>T = "('acc, ('brk, unit) LoopResult) RR"

type_synonym ('acc, 'obsv, 'rbrk) Seq32_body = "('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

type_synonym ('acc, 'obsv, 'rbrk) Seq32Param\<^sub>T = "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32Param"

type_synonym ('acc, 'obsv, 'rbrk) Seq32StepFParam\<^sub>T = "(32 word, 32 word, 32 word \<Rightarrow> 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32StepFParam"

type_synonym ('acc, 'obsv, 'rbrk) Seq64_body = "('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

type_synonym ('acc, 'obsv, 'rbrk) Seq64Param\<^sub>T = "(64 word, 64 word, 64 word, ('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32Param"

type_synonym ('a, 'acc, 'rbrk) WordArrayMapRE\<^sub>T = "(('a WordArray, 'acc) RR, ('rbrk, unit) LoopResult) RR"

type_synonym 'a FreeF = "( SysState, 'a) RR \<Rightarrow>  SysState"

type_synonym ('a, 'acc, 'obsv) FreeAccF = "( SysState, 'a, 'acc, 'obsv) WordArraySetP \<Rightarrow> ( SysState, 'acc) RR"

type_synonym  FindResult\<^sub>T = "(32 word, unit) FindResult"

type_synonym  ErrCode = "32 word"

type_synonym ('a, 'rbrk) ElemB\<^sub>T = "('a, 'rbrk) ElemB"

type_synonym ('a, 'acc, 'obsv) ElemAO\<^sub>T = "('a, 'acc, 'obsv) ElemAO"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayFoldF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayFoldP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) WordArrayMapP"

type_synonym ('a, 'acc, 'obsv) WordArrayFoldNoBreakF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc"

type_synonym ('a, 'acc, 'obsv) WordArrayFoldNoBreakP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) WordArrayMapP"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayMapF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'acc) RR, ('rbrk, unit) LoopResult) RR"

type_synonym ('a, 'acc, 'obsv, 'rbrk) WordArrayMapP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'acc) RR, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) WordArrayMapP"

type_synonym ('a, 'acc, 'obsv) WordArrayMapNoBreakF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) RR"

type_synonym ('a, 'acc, 'obsv) WordArrayMapNoBreakP\<^sub>T = "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) RR, 'acc, 'obsv) WordArrayMapP"

type_synonym ('a, 'acc) ElemA\<^sub>T = "('a, 'acc) ElemA"

type_synonym ('a, 'acc, 'obsv) WordArrayModifyF = "('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA"

type_synonym ('a, 'acc, 'obsv) WordArrayModifyP\<^sub>T = "('a WordArray, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA, 'acc, 'obsv) WordArrayModifyP"

type_synonym  CString = "8 word WordArray"

type_synonym ('a, 'rbrk) ArrB\<^sub>T = "('a, 'rbrk) ArrB"

type_synonym ('a, 'acc) ArrA\<^sub>T = "('a, 'acc) ArrA"

consts u64_to_u32 :: "64 word \<Rightarrow> 32 word"

consts u64_to_u16 :: "64 word \<Rightarrow> 16 word"

consts u32_to_u8 :: "32 word \<Rightarrow> 8 word"

consts u32_to_u16 :: "32 word \<Rightarrow> 16 word"

consts u16_to_u8 :: "16 word \<Rightarrow> 8 word"

consts random_u32 :: "unit \<Rightarrow> 32 word"

consts wordarray_cmp :: "(8 word WordArray, 8 word WordArray) RR \<Rightarrow> bool"

consts wordarray_copy :: "('a WordArray, 'a WordArray, 32 word, 32 word, 32 word) WordArrayCopyP \<Rightarrow> 'a WordArray"

consts wordarray_fold' :: "('a WordArray, ('acc, 'obsv, 'a) WordArrayFindSubP \<Rightarrow> 'acc, 'acc, 'obsv) WordArraySetP \<Rightarrow> 'acc"

consts wordarray_get :: "('a WordArray, 32 word) RR \<Rightarrow> 'a"

consts wordarray_length :: "'a WordArray \<Rightarrow> 32 word"

consts wordarray_map' :: "('a WordArray, ('acc, 'obsv, 'a) WordArrayFindSubP \<Rightarrow> ('acc, 'a) RR, 'acc, 'obsv) WordArraySetP \<Rightarrow> ('a WordArray, 'acc) RR"

consts wordarray_map_simple :: "('a WordArray, 'a \<Rightarrow> 'a) RR \<Rightarrow> 'a WordArray"

consts wordarray_put2 :: "('a WordArray, 32 word, 'a) WordArrayPutP \<Rightarrow> 'a WordArray"

consts wordarray_set :: "('a WordArray, 32 word, 32 word, 'a) WordArraySetP \<Rightarrow> 'a WordArray"

consts wordarray_split :: "('a WordArray, 32 word) RR \<Rightarrow> ('a WordArray, 'a WordArray) RR"

consts wordarray_take :: "('a WordArray, 32 word) RR \<Rightarrow> 'a WordArray"

consts wordarray_u8_as_u32 :: "8 word WordArray \<Rightarrow> 32 word"

consts wordarray_map_view :: "('a WordArray View, 'a \<Rightarrow> 'a) RR \<Rightarrow> 'a WordArray View"

consts wordarray_unview :: "'a WordArray View \<Rightarrow> 'a WordArray"

consts wordarray_view :: "('a WordArray, 32 word, 32 word, 32 word) WordArraySetP \<Rightarrow> 'a WordArray View"

consts wordarray_free :: "( SysState, 'a WordArray) RR \<Rightarrow>  SysState"

consts seq32_simple :: "(32 word, 32 word, 32 word, 'acc \<Rightarrow> 'acc, 'acc) Seq32SimpleParam \<Rightarrow> 'acc"

consts wordarray_clone_rr :: "( SysState, 'a WordArray) RR \<Rightarrow> ( SysState, (unit, 'b WordArray) R) RR"

consts wordarray_slice :: "( SysState, 'a WordArray, 32 word, 32 word) WordArraySetP \<Rightarrow> ( SysState, (unit, 'a WordArray) R) RR"

consts wordarray_create :: "( SysState, 32 word) RR \<Rightarrow> ( SysState, ( SysState, 'a WordArray) RR) R"

consts wordarray_create_nz :: "( SysState, 32 word) RR \<Rightarrow> ( SysState, ( SysState, 'a WordArray) RR) R"

consts wordarray_put :: "('a WordArray, 32 word, 'a) WordArrayPutP \<Rightarrow> ('a WordArray, 'a WordArray) R"

consts seq32 :: "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32Param \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

consts seq32_rev :: "(32 word, 32 word, 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32Param \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

consts seq32_stepf :: "(32 word, 32 word, 32 word \<Rightarrow> 32 word, ('acc, 'obsv, 32 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32StepFParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

consts seq64 :: "(64 word, 64 word, 64 word, ('acc, 'obsv, 64 word) Seq32_bodyParam \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) Seq32Param \<Rightarrow> ('acc, ('rbrk, unit) LoopResult) RR"

consts wordarray_findsub :: "('a WordArray, 'a WordArray, 32 word) WordArrayFindSubP \<Rightarrow>  FindResult\<^sub>T"

consts wordarray_fold :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('rbrk, 'acc) LoopResult, 'acc, 'obsv) WordArrayMapP \<Rightarrow> ('rbrk, 'acc) LoopResult"

consts wordarray_fold_no_break :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> 'acc, 'acc, 'obsv) WordArrayMapP \<Rightarrow> 'acc"

consts wordarray_map :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> (('a, 'acc) RR, ('rbrk, unit) LoopResult) RR, 'acc, 'obsv) WordArrayMapP \<Rightarrow> (('a WordArray, 'acc) RR, ('rbrk, unit) LoopResult) RR"

consts wordarray_map_no_break :: "('a WordArray, 32 word, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) RR, 'acc, 'obsv) WordArrayMapP \<Rightarrow> ('a WordArray, 'acc) RR"

consts wordarray_print :: "8 word WordArray \<Rightarrow> unit"

consts wordarray_modify :: "('a WordArray, 32 word, ('a, 'acc, 'obsv) ElemAO \<Rightarrow> ('a, 'acc) ElemA, 'acc, 'obsv) WordArrayModifyP \<Rightarrow> ('a WordArray, 'acc) ArrA"

end
